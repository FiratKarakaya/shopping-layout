*,
*::after {
    box-sizing: border-box;
}

input,
select,
button {
    font-family: inherit;
}

body {
    margin: 0;
    padding-top: 0.5rem;
    font-family: sans-serif;
}

main {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    justify-content: space-evenly;
    gap: 3%;
    padding: 3%;
    background-color: rgba(211, 211, 211, 0.222);
}

article {
    background-color: white;
}

header {
    position: relative;
}


header::after {     /*Ein Pseudo-Element ist erst nicht sichtbar
                    weil es keinen Content hat (siehe  Quelltext)*/
    content: "";    /*Erst jetzt ist es sichtbar (im Quelltext).
                    Es wird immer noch nicht auf der Seite angezigt.*/
    display: block; /*Erst durch "display: block" und Bestimmung einer Höhe und Breite
                    wird es auf der Seite sichtbar, da es ein block-Element ist.*/
    width: 100%;
    height: 9rem;
    /*Es ist nach dem "header" (also unter dem Bild) positioniert.
    Deshalb mit "position: absolute" aus dem content-flow reißen und positionieren.*/
    position: absolute; /*Durch "position: absolute" überlagert das Pseudo-Element nun
                        den Content der  Klasse "photographer.*/
    bottom: 0;
    left: 0;
    background-image: linear-gradient(transparent 0%, white 95%,  white 100%);
    _background-color: pink;
}

.img {              /*img ist standardmäßig  ein inline-Element. Inline-Elemente
                    haben einen "line-heigt". Deshalb setzt  man img-Element auf
                    "display: block"*/
    width: 100%;
    height: auto;
    opacity: 0.9;
    _line-height: 1.2;
    display: block;
}

.extra-information {
    font-size: 0.7rem;
    position: absolute;
    top: 0.5rem;
    right: 0.5rem;
    background-color: lightgrey;
    opacity: 0.7;
    border-radius: 0.25rem;
    padding: 0.2rem;
    padding-left: 0.5rem;
    padding-right: 0.5rem;
}
 
 .photographer {
    position: absolute;
    bottom: 1rem;
    left: 1rem;
    color: black;
    opacity: 0.6;
    font-size: 0.6rem;
    z-index: 1;     /*Die Klasse "Photogtapher" und die Pseudo-Klasse für den
                    header sind beide mit "absolute" positioniert. Über "z-index"
                    können wir die Reihenfolge der Überlagerung bestimmen.*/
}


.main-content {
    padding: 1rem;
    border-radius: 0.5rem;
    background-color: white;
    display: flex;
    align-items: center;
    display: grid;
}


p {
    color: black;
    opacity: 0.6;
}

section {
    background-color: rgba(128, 128, 128, 0.09);
    border-radius: 0.5rem;
}

.price {
    background-color: white;
    margin-left: 1rem;
    margin-right: 1rem;
    font-size: 1.5rem;
    padding: 0.5rem;
    display: grid;
    justify-content: center;
}

.size-quantity {
    display: grid;
    grid-template-columns: 1fr 1fr;
}

.border-radius {
    border-radius: 1rem;
}



.colors-container {
    display: flex;
    align-items: center;
    gap: 1rem;
}


/*den Farben ein Größe geben, damit die sichtbar sind.
sonst haben die Farben die Größe Null!*/
.color {
    height: 1.5rem;
    width: 1.5rem;
    border-radius: 50%;
}

.blue {
    background-color: blue;
}

.red {
    background-color: red;
}

.black {
    background-color: black;
}


.green-black {
    background-image: linear-gradient(90deg, rgb(117, 169, 68) 50%, black 50%)
}

.blue-black {
    background-image: linear-gradient(90deg, rgb(52, 124, 180) 50%, black 50%)
}

.violet-black {
    background-image: linear-gradient(90deg, rgb(186, 95, 186) 50%, black 50%)
}

.red-white {
    background-image: linear-gradient(90deg, red 50%, white 50%)
}

.black-white {
    background-image: linear-gradient(90deg, black 50%, white 50%)
}

.only-screenreader {
    font-size: 0;
    position: absolute;
}

input[type="radio"] {
    all: unset;         /*input-Felder verschwinden, da kein Inhalt.
                        "unset" setzt alle stylings zurück, die mit dem Element verbunden sind.*/
    position: absolute;                        
}

input[type="radio"]:checked + label > .color {  /*Wenn input gecheckt ist, nehme vom Geschwister-Eelement (+) 
                                                die Kinder-Elemente (>), die die Klasse "color" haben.*/
    outline-offset: 2px;                        /*Eine Lücke von 2px zum Content*/
    outline: 2px solid black;                 /*Rahmen von 2px*/
}

.button-styling {
    all: unset;
    width: calc(100% - 3rem);
    height: 1rem;
    font-size: 0.7rem;
    color: white;
    background-color: rgba(33, 33, 216, 0.781);
    border-radius: 0.3rem;
    margin: 1rem;
    padding: 0.5rem;
    display: grid;
    justify-content: center;
}

